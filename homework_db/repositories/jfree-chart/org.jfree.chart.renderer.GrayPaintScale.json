{"name":"org.jfree.chart.renderer.GrayPaintScale","jDoctorConditions":[{"source":{"methodJavadoc":"    /**\r\n     * Creates a new paint scale for values in the specified range.\r\n     *\r\n     * @param lowerBound  the lower bound.\r\n     * @param upperBound  the upper bound.\r\n     *\r\n     * @throws IllegalArgumentException if {@code lowerBound} is not\r\n     *       less than {@code upperBound}.\r\n     */","methodSourceCode":"public GrayPaintScale(double lowerBound, double upperBound){\n    this(lowerBound, upperBound, 255);\n}","classSourceCode":"/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \n * Other names may be trademarks of their respective owners.]\n *\n * -------------------\n * GrayPaintScale.java\n * -------------------\n * (C) Copyright 2006-2022, by David Gilbert.\n *\n * Original Author:  David Gilbert;\n * Contributor(s):   -;\n *\n */\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\nimport org.jfree.chart.internal.HashUtils;\nimport org.jfree.chart.api.PublicCloneable;\n\n/**\n * A paint scale that returns shades of gray.\n */\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable {\n\n    /**\n     * The lower bound.\n     */\n    private double lowerBound;\n\n    /**\n     * The upper bound.\n     */\n    private double upperBound;\n\n    /**\n     * The alpha transparency (0-255).\n     */\n    private int alpha;\n\n    /**\n     * Creates a new {@code GrayPaintScale} instance with default values.\n     */\n    public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound) {\n        this(lowerBound, upperBound, 255);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     * @param alpha  the alpha transparency (0-255).\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}, or {@code alpha} is not in\n     *       the range 0 to 255.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound, int alpha) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Requires lowerBound < upperBound.\");\n        }\n        if (alpha < 0 || alpha > 255) {\n            throw new IllegalArgumentException(\"Requires alpha in the range 0 to 255.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n    @Override\n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    /**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n    @Override\n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    /**\n     * Returns the alpha transparency that was specified in the constructor.\n     *\n     * @return The alpha transparency (in the range 0 to 255).\n     */\n    public int getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Returns a paint for the specified value.\n     *\n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     *\n     * @return A paint for the specified value.\n     */\n    @Override\n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n        // FIXME:  it probably makes sense to allocate an array of 256 Colors\n        // and lazily populate this array...\n        return new Color(g, g, g, this.alpha);\n    }\n\n    /**\n     * Tests this {@code GrayPaintScale} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only\n     * if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (this.alpha != that.alpha) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = HashUtils.hashCode(hash, this.lowerBound);\n        hash = HashUtils.hashCode(hash, this.upperBound);\n        hash = 43 * hash + this.alpha;\n        return hash;\n    }\n\n    /**\n     * Returns a clone of this {@code GrayPaintScale} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n","_id":"654bdc8c87c1f59108d79c42"},"operation":{"name":"org.jfree.chart.renderer.GrayPaintScale","parameterTypes":["double","double"],"_id":"654bdc8c87c1f59108d79c43"},"identifiers":{"parameters":["lowerBound","upperBound"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654bdc8c87c1f59108d79c44"},"pre":[],"post":[],"throws":[],"__v":0},{"source":{"methodJavadoc":"    /**\r\n     * Creates a new paint scale for values in the specified range.\r\n     *\r\n     * @param lowerBound  the lower bound.\r\n     * @param upperBound  the upper bound.\r\n     * @param alpha  the alpha transparency (0-255).\r\n     *\r\n     * @throws IllegalArgumentException if {@code lowerBound} is not\r\n     *       less than {@code upperBound}, or {@code alpha} is not in\r\n     *       the range 0 to 255.\r\n     */","methodSourceCode":"public GrayPaintScale(double lowerBound, double upperBound, int alpha){\n    if (lowerBound >= upperBound) {\n        throw new IllegalArgumentException(\"Requires lowerBound < upperBound.\");\n    }\n    if (alpha < 0 || alpha > 255) {\n        throw new IllegalArgumentException(\"Requires alpha in the range 0 to 255.\");\n    }\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.alpha = alpha;\n}","classSourceCode":"/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \n * Other names may be trademarks of their respective owners.]\n *\n * -------------------\n * GrayPaintScale.java\n * -------------------\n * (C) Copyright 2006-2022, by David Gilbert.\n *\n * Original Author:  David Gilbert;\n * Contributor(s):   -;\n *\n */\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\nimport org.jfree.chart.internal.HashUtils;\nimport org.jfree.chart.api.PublicCloneable;\n\n/**\n * A paint scale that returns shades of gray.\n */\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable {\n\n    /**\n     * The lower bound.\n     */\n    private double lowerBound;\n\n    /**\n     * The upper bound.\n     */\n    private double upperBound;\n\n    /**\n     * The alpha transparency (0-255).\n     */\n    private int alpha;\n\n    /**\n     * Creates a new {@code GrayPaintScale} instance with default values.\n     */\n    public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound) {\n        this(lowerBound, upperBound, 255);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     * @param alpha  the alpha transparency (0-255).\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}, or {@code alpha} is not in\n     *       the range 0 to 255.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound, int alpha) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Requires lowerBound < upperBound.\");\n        }\n        if (alpha < 0 || alpha > 255) {\n            throw new IllegalArgumentException(\"Requires alpha in the range 0 to 255.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n    @Override\n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    /**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n    @Override\n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    /**\n     * Returns the alpha transparency that was specified in the constructor.\n     *\n     * @return The alpha transparency (in the range 0 to 255).\n     */\n    public int getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Returns a paint for the specified value.\n     *\n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     *\n     * @return A paint for the specified value.\n     */\n    @Override\n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n        // FIXME:  it probably makes sense to allocate an array of 256 Colors\n        // and lazily populate this array...\n        return new Color(g, g, g, this.alpha);\n    }\n\n    /**\n     * Tests this {@code GrayPaintScale} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only\n     * if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (this.alpha != that.alpha) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = HashUtils.hashCode(hash, this.lowerBound);\n        hash = HashUtils.hashCode(hash, this.upperBound);\n        hash = 43 * hash + this.alpha;\n        return hash;\n    }\n\n    /**\n     * Returns a clone of this {@code GrayPaintScale} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n","_id":"654bdc8c87c1f59108d79c47"},"operation":{"name":"org.jfree.chart.renderer.GrayPaintScale","parameterTypes":["double","double","int"],"_id":"654bdc8c87c1f59108d79c48"},"identifiers":{"parameters":["lowerBound","upperBound","alpha"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654bdc8c87c1f59108d79c49"},"pre":[],"post":[],"throws":[],"__v":0},{"source":{"methodJavadoc":"    /**\r\n     * Returns the alpha transparency that was specified in the constructor.\r\n     * \r\n     * @return The alpha transparency (in the range 0 to 255).\r\n     */","methodSourceCode":"public int getAlpha(){\n    return this.alpha;\n}","classSourceCode":"/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \n * Other names may be trademarks of their respective owners.]\n *\n * -------------------\n * GrayPaintScale.java\n * -------------------\n * (C) Copyright 2006-2022, by David Gilbert.\n *\n * Original Author:  David Gilbert;\n * Contributor(s):   -;\n *\n */\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\nimport org.jfree.chart.internal.HashUtils;\nimport org.jfree.chart.api.PublicCloneable;\n\n/**\n * A paint scale that returns shades of gray.\n */\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable {\n\n    /**\n     * The lower bound.\n     */\n    private double lowerBound;\n\n    /**\n     * The upper bound.\n     */\n    private double upperBound;\n\n    /**\n     * The alpha transparency (0-255).\n     */\n    private int alpha;\n\n    /**\n     * Creates a new {@code GrayPaintScale} instance with default values.\n     */\n    public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound) {\n        this(lowerBound, upperBound, 255);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     * @param alpha  the alpha transparency (0-255).\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}, or {@code alpha} is not in\n     *       the range 0 to 255.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound, int alpha) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Requires lowerBound < upperBound.\");\n        }\n        if (alpha < 0 || alpha > 255) {\n            throw new IllegalArgumentException(\"Requires alpha in the range 0 to 255.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n    @Override\n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    /**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n    @Override\n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    /**\n     * Returns the alpha transparency that was specified in the constructor.\n     *\n     * @return The alpha transparency (in the range 0 to 255).\n     */\n    public int getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Returns a paint for the specified value.\n     *\n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     *\n     * @return A paint for the specified value.\n     */\n    @Override\n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n        // FIXME:  it probably makes sense to allocate an array of 256 Colors\n        // and lazily populate this array...\n        return new Color(g, g, g, this.alpha);\n    }\n\n    /**\n     * Tests this {@code GrayPaintScale} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only\n     * if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (this.alpha != that.alpha) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = HashUtils.hashCode(hash, this.lowerBound);\n        hash = HashUtils.hashCode(hash, this.upperBound);\n        hash = 43 * hash + this.alpha;\n        return hash;\n    }\n\n    /**\n     * Returns a clone of this {@code GrayPaintScale} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n","_id":"654bdc8c87c1f59108d79c56"},"operation":{"name":"getAlpha","parameterTypes":[],"_id":"654bdc8c87c1f59108d79c57"},"identifiers":{"parameters":[],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654bdc8c87c1f59108d79c58"},"pre":[],"post":[],"throws":[],"__v":0},{"source":{"methodJavadoc":"    /**\r\n     * Returns a paint for the specified value.\r\n     *\r\n     * @param value  the value (must be within the range specified by the\r\n     *         lower and upper bounds for the scale).\r\n     *\r\n     * @return A paint for the specified value.\r\n     */","methodSourceCode":"public Paint getPaint(double value){\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n    int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n    // FIXME:  it probably makes sense to allocate an array of 256 Colors\n    // and lazily populate this array...\n    return new Color(g, g, g, this.alpha);\n}","classSourceCode":"/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \n * Other names may be trademarks of their respective owners.]\n *\n * -------------------\n * GrayPaintScale.java\n * -------------------\n * (C) Copyright 2006-2022, by David Gilbert.\n *\n * Original Author:  David Gilbert;\n * Contributor(s):   -;\n *\n */\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\nimport org.jfree.chart.internal.HashUtils;\nimport org.jfree.chart.api.PublicCloneable;\n\n/**\n * A paint scale that returns shades of gray.\n */\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable {\n\n    /**\n     * The lower bound.\n     */\n    private double lowerBound;\n\n    /**\n     * The upper bound.\n     */\n    private double upperBound;\n\n    /**\n     * The alpha transparency (0-255).\n     */\n    private int alpha;\n\n    /**\n     * Creates a new {@code GrayPaintScale} instance with default values.\n     */\n    public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound) {\n        this(lowerBound, upperBound, 255);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     * @param alpha  the alpha transparency (0-255).\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}, or {@code alpha} is not in\n     *       the range 0 to 255.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound, int alpha) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Requires lowerBound < upperBound.\");\n        }\n        if (alpha < 0 || alpha > 255) {\n            throw new IllegalArgumentException(\"Requires alpha in the range 0 to 255.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n    @Override\n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    /**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n    @Override\n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    /**\n     * Returns the alpha transparency that was specified in the constructor.\n     *\n     * @return The alpha transparency (in the range 0 to 255).\n     */\n    public int getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Returns a paint for the specified value.\n     *\n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     *\n     * @return A paint for the specified value.\n     */\n    @Override\n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n        // FIXME:  it probably makes sense to allocate an array of 256 Colors\n        // and lazily populate this array...\n        return new Color(g, g, g, this.alpha);\n    }\n\n    /**\n     * Tests this {@code GrayPaintScale} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only\n     * if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (this.alpha != that.alpha) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = HashUtils.hashCode(hash, this.lowerBound);\n        hash = HashUtils.hashCode(hash, this.upperBound);\n        hash = 43 * hash + this.alpha;\n        return hash;\n    }\n\n    /**\n     * Returns a clone of this {@code GrayPaintScale} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n","_id":"654bdc8c87c1f59108d79c5b"},"operation":{"name":"getPaint","parameterTypes":["double"],"_id":"654bdc8c87c1f59108d79c5c"},"identifiers":{"parameters":["value"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654bdc8c87c1f59108d79c5d"},"pre":[],"post":[],"throws":[],"__v":0},{"source":{"methodJavadoc":"    /**\r\n     * Tests this {@code GrayPaintScale} instance for equality with an\r\n     * arbitrary object.  This method returns {@code true} if and only\r\n     * if:\r\n     * <ul>\r\n     * <li>{@code obj} is not {@code null};</li>\r\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\r\n     * </ul>\r\n     *\r\n     * @param obj  the object ({@code null} permitted).\r\n     *\r\n     * @return A boolean.\r\n     */","methodSourceCode":"public boolean equals(Object obj){\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof GrayPaintScale)) {\n        return false;\n    }\n    GrayPaintScale that = (GrayPaintScale) obj;\n    if (this.lowerBound != that.lowerBound) {\n        return false;\n    }\n    if (this.upperBound != that.upperBound) {\n        return false;\n    }\n    if (this.alpha != that.alpha) {\n        return false;\n    }\n    return true;\n}","classSourceCode":"/* ===========================================================\n * JFreeChart : a free chart library for the Java(tm) platform\n * ===========================================================\n *\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\n *\n * Project Info:  http://www.jfree.org/jfreechart/index.html\n *\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \n * Other names may be trademarks of their respective owners.]\n *\n * -------------------\n * GrayPaintScale.java\n * -------------------\n * (C) Copyright 2006-2022, by David Gilbert.\n *\n * Original Author:  David Gilbert;\n * Contributor(s):   -;\n *\n */\npackage org.jfree.chart.renderer;\n\nimport java.awt.Color;\nimport java.awt.Paint;\nimport java.io.Serializable;\nimport org.jfree.chart.internal.HashUtils;\nimport org.jfree.chart.api.PublicCloneable;\n\n/**\n * A paint scale that returns shades of gray.\n */\npublic class GrayPaintScale implements PaintScale, PublicCloneable, Serializable {\n\n    /**\n     * The lower bound.\n     */\n    private double lowerBound;\n\n    /**\n     * The upper bound.\n     */\n    private double upperBound;\n\n    /**\n     * The alpha transparency (0-255).\n     */\n    private int alpha;\n\n    /**\n     * Creates a new {@code GrayPaintScale} instance with default values.\n     */\n    public GrayPaintScale() {\n        this(0.0, 1.0);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound) {\n        this(lowerBound, upperBound, 255);\n    }\n\n    /**\n     * Creates a new paint scale for values in the specified range.\n     *\n     * @param lowerBound  the lower bound.\n     * @param upperBound  the upper bound.\n     * @param alpha  the alpha transparency (0-255).\n     *\n     * @throws IllegalArgumentException if {@code lowerBound} is not\n     *       less than {@code upperBound}, or {@code alpha} is not in\n     *       the range 0 to 255.\n     */\n    public GrayPaintScale(double lowerBound, double upperBound, int alpha) {\n        if (lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Requires lowerBound < upperBound.\");\n        }\n        if (alpha < 0 || alpha > 255) {\n            throw new IllegalArgumentException(\"Requires alpha in the range 0 to 255.\");\n        }\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the lower bound.\n     *\n     * @return The lower bound.\n     *\n     * @see #getUpperBound()\n     */\n    @Override\n    public double getLowerBound() {\n        return this.lowerBound;\n    }\n\n    /**\n     * Returns the upper bound.\n     *\n     * @return The upper bound.\n     *\n     * @see #getLowerBound()\n     */\n    @Override\n    public double getUpperBound() {\n        return this.upperBound;\n    }\n\n    /**\n     * Returns the alpha transparency that was specified in the constructor.\n     *\n     * @return The alpha transparency (in the range 0 to 255).\n     */\n    public int getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Returns a paint for the specified value.\n     *\n     * @param value  the value (must be within the range specified by the\n     *         lower and upper bounds for the scale).\n     *\n     * @return A paint for the specified value.\n     */\n    @Override\n    public Paint getPaint(double value) {\n        double v = Math.max(value, this.lowerBound);\n        v = Math.min(v, this.upperBound);\n        int g = (int) ((v - this.lowerBound) / (this.upperBound - this.lowerBound) * 255.0);\n        // FIXME:  it probably makes sense to allocate an array of 256 Colors\n        // and lazily populate this array...\n        return new Color(g, g, g, this.alpha);\n    }\n\n    /**\n     * Tests this {@code GrayPaintScale} instance for equality with an\n     * arbitrary object.  This method returns {@code true} if and only\n     * if:\n     * <ul>\n     * <li>{@code obj} is not {@code null};</li>\n     * <li>{@code obj} is an instance of {@code GrayPaintScale};</li>\n     * </ul>\n     *\n     * @param obj  the object ({@code null} permitted).\n     *\n     * @return A boolean.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof GrayPaintScale)) {\n            return false;\n        }\n        GrayPaintScale that = (GrayPaintScale) obj;\n        if (this.lowerBound != that.lowerBound) {\n            return false;\n        }\n        if (this.upperBound != that.upperBound) {\n            return false;\n        }\n        if (this.alpha != that.alpha) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns a hash code for this instance.\n     *\n     * @return A hash code.\n     */\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = HashUtils.hashCode(hash, this.lowerBound);\n        hash = HashUtils.hashCode(hash, this.upperBound);\n        hash = 43 * hash + this.alpha;\n        return hash;\n    }\n\n    /**\n     * Returns a clone of this {@code GrayPaintScale} instance.\n     *\n     * @return A clone.\n     *\n     * @throws CloneNotSupportedException if there is a problem cloning this\n     *     instance.\n     */\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n","_id":"654bdc8c87c1f59108d79c60"},"operation":{"name":"equals","parameterTypes":["Object"],"_id":"654bdc8c87c1f59108d79c61"},"identifiers":{"parameters":["obj"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654bdc8c87c1f59108d79c62"},"pre":[],"post":[],"throws":[],"__v":0}],"__v":5}