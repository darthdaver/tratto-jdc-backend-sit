{"name":"org.jfree.data.xy.DefaultXYDataset","jDoctorConditions":[{"source":{"methodJavadoc":"    /**\r\n     * Returns the key for a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The key for the series.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */","methodSourceCode":"public S getSeriesKey(int series){\r\n    Args.requireInRange(series, \"series\", 0, this.seriesKeys.size() - 1);\r\n    return this.seriesKeys.get(series);\r\n}","classSourceCode":"/* ===========================================================\r\n * JFreeChart : a free chart library for the Java(tm) platform\r\n * ===========================================================\r\n *\r\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\r\n *\r\n * Project Info:  http://www.jfree.org/jfreechart/index.html\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\r\n * USA.\r\n *\r\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \r\n * Other names may be trademarks of their respective owners.]\r\n *\r\n * ---------------------\r\n * DefaultXYDataset.java\r\n * ---------------------\r\n * (C) Copyright 2006-2022, by David Gilbert and Contributors.\r\n *\r\n * Original Author:  David Gilbert;\r\n * Contributor(s):   -;\r\n *\r\n */\r\npackage org.jfree.data.xy;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.jfree.chart.internal.Args;\r\nimport org.jfree.chart.api.PublicCloneable;\r\nimport org.jfree.data.DomainOrder;\r\nimport org.jfree.data.general.DatasetChangeEvent;\r\n\r\n/**\r\n * A default implementation of the {@link XYDataset} interface that stores\r\n * data values in arrays of double primitives.\r\n *\r\n * @param <S> the type of the series keys ({@code String} is commonly used).\r\n *\r\n * @since 1.0.2\r\n */\r\npublic class DefaultXYDataset<S extends Comparable<S>> extends AbstractXYDataset<S> implements XYDataset<S>, PublicCloneable {\r\n\r\n    /**\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     */\r\n    private List<S> seriesKeys;\r\n\r\n    /**\r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync\r\n     * with the seriesKeys list.\r\n     */\r\n    private List<double[][]> seriesList;\r\n\r\n    /**\r\n     * Creates a new {@code DefaultXYDataset} instance, initially\r\n     * containing no data.\r\n     */\r\n    public DefaultXYDataset() {\r\n        this.seriesKeys = new ArrayList<>();\r\n        this.seriesList = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Returns the number of series in the dataset.\r\n     *\r\n     * @return The series count.\r\n     */\r\n    @Override\r\n    public int getSeriesCount() {\r\n        return this.seriesList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns the key for a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The key for the series.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public S getSeriesKey(int series) {\r\n        Args.requireInRange(series, \"series\", 0, this.seriesKeys.size() - 1);\r\n        return this.seriesKeys.get(series);\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the series with the specified key, or -1 if there\r\n     * is no such series in the dataset.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} permitted).\r\n     *\r\n     * @return The index, or -1.\r\n     */\r\n    @Override\r\n    public int indexOf(S seriesKey) {\r\n        return this.seriesKeys.indexOf(seriesKey);\r\n    }\r\n\r\n    /**\r\n     * Returns the order of the domain (x-) values in the dataset.  In this\r\n     * implementation, we cannot guarantee that the x-values are ordered, so\r\n     * this method returns {@code DomainOrder.NONE}.\r\n     *\r\n     * @return {@code DomainOrder.NONE}.\r\n     */\r\n    @Override\r\n    public DomainOrder getDomainOrder() {\r\n        return DomainOrder.NONE;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public int getItemCount(int series) {\r\n        if ((series < 0) || (series >= getSeriesCount())) {\r\n            throw new IllegalArgumentException(\"Series index out of bounds\");\r\n        }\r\n        double[][] seriesArray = this.seriesList.get(series);\r\n        return seriesArray[0].length;\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public double getXValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[0][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getXValue(int, int)\r\n     */\r\n    @Override\r\n    public Number getX(int series, int item) {\r\n        return getXValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getY(int, int)\r\n     */\r\n    @Override\r\n    public double getYValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[1][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public Number getY(int series, int item) {\r\n        return getYValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Adds a series or if a series with the same key already exists replaces\r\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     * @param data  the data (must be an array with length 2, containing two\r\n     *     arrays of equal length, the first containing the x-values and the\r\n     *     second containing the y-values).\r\n     */\r\n    public void addSeries(S seriesKey, double[][] data) {\r\n        if (seriesKey == null) {\r\n            throw new IllegalArgumentException(\"The 'seriesKey' cannot be null.\");\r\n        }\r\n        if (data == null) {\r\n            throw new IllegalArgumentException(\"The 'data' is null.\");\r\n        }\r\n        if (data.length != 2) {\r\n            throw new IllegalArgumentException(\"The 'data' array must have length == 2.\");\r\n        }\r\n        if (data[0].length != data[1].length) {\r\n            throw new IllegalArgumentException(\"The 'data' array must contain two arrays with equal length.\");\r\n        }\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex == -1) {\r\n            // add a new series\r\n            this.seriesKeys.add(seriesKey);\r\n            this.seriesList.add(data);\r\n        } else {\r\n            // replace an existing series\r\n            this.seriesList.remove(seriesIndex);\r\n            this.seriesList.add(seriesIndex, data);\r\n        }\r\n        notifyListeners(new DatasetChangeEvent(this, this));\r\n    }\r\n\r\n    /**\r\n     * Removes a series from the dataset, then sends a\r\n     * {@link DatasetChangeEvent} to all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     */\r\n    public void removeSeries(S seriesKey) {\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex >= 0) {\r\n            this.seriesKeys.remove(seriesIndex);\r\n            this.seriesList.remove(seriesIndex);\r\n            notifyListeners(new DatasetChangeEvent(this, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests this {@code DefaultXYDataset} instance for equality with an\r\n     * arbitrary object.  This method returns {@code true} if and only if:\r\n     * <ul>\r\n     * <li>{@code obj} is not {@code null};</li>\r\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\r\n     * <li>both datasets have the same number of series, each containing\r\n     *         exactly the same values.</li>\r\n     * </ul>\r\n     *\r\n     * @param obj  the object ({@code null} permitted).\r\n     *\r\n     * @return A boolean.\r\n     */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) {\r\n            return true;\r\n        }\r\n        if (!(obj instanceof DefaultXYDataset)) {\r\n            return false;\r\n        }\r\n        DefaultXYDataset that = (DefaultXYDataset) obj;\r\n        if (!this.seriesKeys.equals(that.seriesKeys)) {\r\n            return false;\r\n        }\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] d1 = this.seriesList.get(i);\r\n            double[][] d2 = (double[][]) that.seriesList.get(i);\r\n            double[] d1x = d1[0];\r\n            double[] d2x = d2[0];\r\n            if (!Arrays.equals(d1x, d2x)) {\r\n                return false;\r\n            }\r\n            double[] d1y = d1[1];\r\n            double[] d2y = d2[1];\r\n            if (!Arrays.equals(d1y, d2y)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        result = this.seriesKeys.hashCode();\r\n        result = 29 * result + this.seriesList.hashCode();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an independent copy of this dataset.\r\n     *\r\n     * @return The cloned dataset.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a problem cloning the\r\n     *     dataset (for instance, if a non-cloneable object is used for a\r\n     *     series key).\r\n     */\r\n    @Override\r\n    public Object clone() throws CloneNotSupportedException {\r\n        DefaultXYDataset clone = (DefaultXYDataset) super.clone();\r\n        clone.seriesKeys = new ArrayList(this.seriesKeys);\r\n        clone.seriesList = new ArrayList(this.seriesList.size());\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] data = this.seriesList.get(i);\r\n            double[] x = data[0];\r\n            double[] y = data[1];\r\n            double[] xx = new double[x.length];\r\n            double[] yy = new double[y.length];\r\n            System.arraycopy(x, 0, xx, 0, x.length);\r\n            System.arraycopy(y, 0, yy, 0, y.length);\r\n            clone.seriesList.add(i, new double[][] { xx, yy });\r\n        }\r\n        return clone;\r\n    }\r\n}\r\n","_id":"654c8e3dbeaabc9396c877c9"},"operation":{"name":"getSeriesKey","parameterTypes":["int"],"_id":"654c8e3dbeaabc9396c877ca"},"identifiers":{"parameters":["series"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654c8e3dbeaabc9396c877cb"},"pre":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d0625beaabc9396c87dd2\",\n        \"description\": \"@param series the series index (in the range {@code 0} to {@code getSeriesCount() - 1}).\",\n        \"guard\": {\n            \"condition\": \" series >= 0 && series < this.getSeriesCount()\",\n            \"description\": \"@param series the series index (in the range {@code 0} to {@code getSeriesCount() - 1}).\",\n            \"_id\": \"654d0625beaabc9396c87dd3\"\n        },\n        \"__v\": 0\n    }\n}"],"post":[],"throws":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"exception\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"exception\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d061abeaabc9396c87dcd\",\n        \"exception\": \"IllegalArgumentException\",\n        \"description\": \"@throws IllegalArgumentException if {@code series} is not in the specified range.\",\n        \"guard\": {\n            \"condition\": \"(series >= 0 && series < this.getSeriesCount()) == false\",\n            \"description\": \"@throws IllegalArgumentException if {@code series} is not in the specified range.\",\n            \"_id\": \"654d061abeaabc9396c87dce\"\n        },\n        \"__v\": 0\n    }\n}"],"__v":8},{"source":{"methodJavadoc":"    /**\r\n     * Returns the index of the series with the specified key, or -1 if there\r\n     * is no such series in the dataset.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} permitted).\r\n     *\r\n     * @return The index, or -1.\r\n     */","methodSourceCode":"public int indexOf(S seriesKey){\r\n    return this.seriesKeys.indexOf(seriesKey);\r\n}","classSourceCode":"/* ===========================================================\r\n * JFreeChart : a free chart library for the Java(tm) platform\r\n * ===========================================================\r\n *\r\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\r\n *\r\n * Project Info:  http://www.jfree.org/jfreechart/index.html\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\r\n * USA.\r\n *\r\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \r\n * Other names may be trademarks of their respective owners.]\r\n *\r\n * ---------------------\r\n * DefaultXYDataset.java\r\n * ---------------------\r\n * (C) Copyright 2006-2022, by David Gilbert and Contributors.\r\n *\r\n * Original Author:  David Gilbert;\r\n * Contributor(s):   -;\r\n *\r\n */\r\npackage org.jfree.data.xy;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.jfree.chart.internal.Args;\r\nimport org.jfree.chart.api.PublicCloneable;\r\nimport org.jfree.data.DomainOrder;\r\nimport org.jfree.data.general.DatasetChangeEvent;\r\n\r\n/**\r\n * A default implementation of the {@link XYDataset} interface that stores\r\n * data values in arrays of double primitives.\r\n *\r\n * @param <S> the type of the series keys ({@code String} is commonly used).\r\n *\r\n * @since 1.0.2\r\n */\r\npublic class DefaultXYDataset<S extends Comparable<S>> extends AbstractXYDataset<S> implements XYDataset<S>, PublicCloneable {\r\n\r\n    /**\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     */\r\n    private List<S> seriesKeys;\r\n\r\n    /**\r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync\r\n     * with the seriesKeys list.\r\n     */\r\n    private List<double[][]> seriesList;\r\n\r\n    /**\r\n     * Creates a new {@code DefaultXYDataset} instance, initially\r\n     * containing no data.\r\n     */\r\n    public DefaultXYDataset() {\r\n        this.seriesKeys = new ArrayList<>();\r\n        this.seriesList = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Returns the number of series in the dataset.\r\n     *\r\n     * @return The series count.\r\n     */\r\n    @Override\r\n    public int getSeriesCount() {\r\n        return this.seriesList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns the key for a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The key for the series.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public S getSeriesKey(int series) {\r\n        Args.requireInRange(series, \"series\", 0, this.seriesKeys.size() - 1);\r\n        return this.seriesKeys.get(series);\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the series with the specified key, or -1 if there\r\n     * is no such series in the dataset.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} permitted).\r\n     *\r\n     * @return The index, or -1.\r\n     */\r\n    @Override\r\n    public int indexOf(S seriesKey) {\r\n        return this.seriesKeys.indexOf(seriesKey);\r\n    }\r\n\r\n    /**\r\n     * Returns the order of the domain (x-) values in the dataset.  In this\r\n     * implementation, we cannot guarantee that the x-values are ordered, so\r\n     * this method returns {@code DomainOrder.NONE}.\r\n     *\r\n     * @return {@code DomainOrder.NONE}.\r\n     */\r\n    @Override\r\n    public DomainOrder getDomainOrder() {\r\n        return DomainOrder.NONE;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public int getItemCount(int series) {\r\n        if ((series < 0) || (series >= getSeriesCount())) {\r\n            throw new IllegalArgumentException(\"Series index out of bounds\");\r\n        }\r\n        double[][] seriesArray = this.seriesList.get(series);\r\n        return seriesArray[0].length;\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public double getXValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[0][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getXValue(int, int)\r\n     */\r\n    @Override\r\n    public Number getX(int series, int item) {\r\n        return getXValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getY(int, int)\r\n     */\r\n    @Override\r\n    public double getYValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[1][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public Number getY(int series, int item) {\r\n        return getYValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Adds a series or if a series with the same key already exists replaces\r\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     * @param data  the data (must be an array with length 2, containing two\r\n     *     arrays of equal length, the first containing the x-values and the\r\n     *     second containing the y-values).\r\n     */\r\n    public void addSeries(S seriesKey, double[][] data) {\r\n        if (seriesKey == null) {\r\n            throw new IllegalArgumentException(\"The 'seriesKey' cannot be null.\");\r\n        }\r\n        if (data == null) {\r\n            throw new IllegalArgumentException(\"The 'data' is null.\");\r\n        }\r\n        if (data.length != 2) {\r\n            throw new IllegalArgumentException(\"The 'data' array must have length == 2.\");\r\n        }\r\n        if (data[0].length != data[1].length) {\r\n            throw new IllegalArgumentException(\"The 'data' array must contain two arrays with equal length.\");\r\n        }\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex == -1) {\r\n            // add a new series\r\n            this.seriesKeys.add(seriesKey);\r\n            this.seriesList.add(data);\r\n        } else {\r\n            // replace an existing series\r\n            this.seriesList.remove(seriesIndex);\r\n            this.seriesList.add(seriesIndex, data);\r\n        }\r\n        notifyListeners(new DatasetChangeEvent(this, this));\r\n    }\r\n\r\n    /**\r\n     * Removes a series from the dataset, then sends a\r\n     * {@link DatasetChangeEvent} to all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     */\r\n    public void removeSeries(S seriesKey) {\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex >= 0) {\r\n            this.seriesKeys.remove(seriesIndex);\r\n            this.seriesList.remove(seriesIndex);\r\n            notifyListeners(new DatasetChangeEvent(this, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests this {@code DefaultXYDataset} instance for equality with an\r\n     * arbitrary object.  This method returns {@code true} if and only if:\r\n     * <ul>\r\n     * <li>{@code obj} is not {@code null};</li>\r\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\r\n     * <li>both datasets have the same number of series, each containing\r\n     *         exactly the same values.</li>\r\n     * </ul>\r\n     *\r\n     * @param obj  the object ({@code null} permitted).\r\n     *\r\n     * @return A boolean.\r\n     */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) {\r\n            return true;\r\n        }\r\n        if (!(obj instanceof DefaultXYDataset)) {\r\n            return false;\r\n        }\r\n        DefaultXYDataset that = (DefaultXYDataset) obj;\r\n        if (!this.seriesKeys.equals(that.seriesKeys)) {\r\n            return false;\r\n        }\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] d1 = this.seriesList.get(i);\r\n            double[][] d2 = (double[][]) that.seriesList.get(i);\r\n            double[] d1x = d1[0];\r\n            double[] d2x = d2[0];\r\n            if (!Arrays.equals(d1x, d2x)) {\r\n                return false;\r\n            }\r\n            double[] d1y = d1[1];\r\n            double[] d2y = d2[1];\r\n            if (!Arrays.equals(d1y, d2y)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        result = this.seriesKeys.hashCode();\r\n        result = 29 * result + this.seriesList.hashCode();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an independent copy of this dataset.\r\n     *\r\n     * @return The cloned dataset.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a problem cloning the\r\n     *     dataset (for instance, if a non-cloneable object is used for a\r\n     *     series key).\r\n     */\r\n    @Override\r\n    public Object clone() throws CloneNotSupportedException {\r\n        DefaultXYDataset clone = (DefaultXYDataset) super.clone();\r\n        clone.seriesKeys = new ArrayList(this.seriesKeys);\r\n        clone.seriesList = new ArrayList(this.seriesList.size());\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] data = this.seriesList.get(i);\r\n            double[] x = data[0];\r\n            double[] y = data[1];\r\n            double[] xx = new double[x.length];\r\n            double[] yy = new double[y.length];\r\n            System.arraycopy(x, 0, xx, 0, x.length);\r\n            System.arraycopy(y, 0, yy, 0, y.length);\r\n            clone.seriesList.add(i, new double[][] { xx, yy });\r\n        }\r\n        return clone;\r\n    }\r\n}\r\n","_id":"654c8e3dbeaabc9396c877ce"},"operation":{"name":"indexOf","parameterTypes":["Comparable"],"_id":"654c8e3dbeaabc9396c877cf"},"identifiers":{"parameters":["seriesKey"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654c8e3dbeaabc9396c877d0"},"pre":[],"post":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"description\": \"init\",\n                \"property\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"description\": true,\n                    \"property\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654c997ebeaabc9396c87aba\",\n        \"description\": \"@return The index, or -1.\",\n        \"property\": {\n            \"condition\": \"methodResultID >= -1\",\n            \"description\": \"@return The index, or -1.\",\n            \"_id\": \"654c997ebeaabc9396c87abb\"\n        },\n        \"guard\": {\n            \"condition\": \"true\",\n            \"description\": \"@return The index, or -1.\",\n            \"_id\": \"654c997ebeaabc9396c87abc\"\n        },\n        \"__v\": 0\n    }\n}"],"throws":[],"__v":3},{"source":{"methodJavadoc":"    /**\r\n     * Returns the order of the domain (x-) values in the dataset.  In this\r\n     * implementation, we cannot guarantee that the x-values are ordered, so\r\n     * this method returns {@code DomainOrder.NONE}.\r\n     *\r\n     * @return {@code DomainOrder.NONE}.\r\n     */","methodSourceCode":"public DomainOrder getDomainOrder(){\r\n    return DomainOrder.NONE;\r\n}","classSourceCode":"/* ===========================================================\r\n * JFreeChart : a free chart library for the Java(tm) platform\r\n * ===========================================================\r\n *\r\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\r\n *\r\n * Project Info:  http://www.jfree.org/jfreechart/index.html\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\r\n * USA.\r\n *\r\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \r\n * Other names may be trademarks of their respective owners.]\r\n *\r\n * ---------------------\r\n * DefaultXYDataset.java\r\n * ---------------------\r\n * (C) Copyright 2006-2022, by David Gilbert and Contributors.\r\n *\r\n * Original Author:  David Gilbert;\r\n * Contributor(s):   -;\r\n *\r\n */\r\npackage org.jfree.data.xy;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.jfree.chart.internal.Args;\r\nimport org.jfree.chart.api.PublicCloneable;\r\nimport org.jfree.data.DomainOrder;\r\nimport org.jfree.data.general.DatasetChangeEvent;\r\n\r\n/**\r\n * A default implementation of the {@link XYDataset} interface that stores\r\n * data values in arrays of double primitives.\r\n *\r\n * @param <S> the type of the series keys ({@code String} is commonly used).\r\n *\r\n * @since 1.0.2\r\n */\r\npublic class DefaultXYDataset<S extends Comparable<S>> extends AbstractXYDataset<S> implements XYDataset<S>, PublicCloneable {\r\n\r\n    /**\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     */\r\n    private List<S> seriesKeys;\r\n\r\n    /**\r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync\r\n     * with the seriesKeys list.\r\n     */\r\n    private List<double[][]> seriesList;\r\n\r\n    /**\r\n     * Creates a new {@code DefaultXYDataset} instance, initially\r\n     * containing no data.\r\n     */\r\n    public DefaultXYDataset() {\r\n        this.seriesKeys = new ArrayList<>();\r\n        this.seriesList = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Returns the number of series in the dataset.\r\n     *\r\n     * @return The series count.\r\n     */\r\n    @Override\r\n    public int getSeriesCount() {\r\n        return this.seriesList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns the key for a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The key for the series.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public S getSeriesKey(int series) {\r\n        Args.requireInRange(series, \"series\", 0, this.seriesKeys.size() - 1);\r\n        return this.seriesKeys.get(series);\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the series with the specified key, or -1 if there\r\n     * is no such series in the dataset.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} permitted).\r\n     *\r\n     * @return The index, or -1.\r\n     */\r\n    @Override\r\n    public int indexOf(S seriesKey) {\r\n        return this.seriesKeys.indexOf(seriesKey);\r\n    }\r\n\r\n    /**\r\n     * Returns the order of the domain (x-) values in the dataset.  In this\r\n     * implementation, we cannot guarantee that the x-values are ordered, so\r\n     * this method returns {@code DomainOrder.NONE}.\r\n     *\r\n     * @return {@code DomainOrder.NONE}.\r\n     */\r\n    @Override\r\n    public DomainOrder getDomainOrder() {\r\n        return DomainOrder.NONE;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public int getItemCount(int series) {\r\n        if ((series < 0) || (series >= getSeriesCount())) {\r\n            throw new IllegalArgumentException(\"Series index out of bounds\");\r\n        }\r\n        double[][] seriesArray = this.seriesList.get(series);\r\n        return seriesArray[0].length;\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public double getXValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[0][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getXValue(int, int)\r\n     */\r\n    @Override\r\n    public Number getX(int series, int item) {\r\n        return getXValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getY(int, int)\r\n     */\r\n    @Override\r\n    public double getYValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[1][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public Number getY(int series, int item) {\r\n        return getYValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Adds a series or if a series with the same key already exists replaces\r\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     * @param data  the data (must be an array with length 2, containing two\r\n     *     arrays of equal length, the first containing the x-values and the\r\n     *     second containing the y-values).\r\n     */\r\n    public void addSeries(S seriesKey, double[][] data) {\r\n        if (seriesKey == null) {\r\n            throw new IllegalArgumentException(\"The 'seriesKey' cannot be null.\");\r\n        }\r\n        if (data == null) {\r\n            throw new IllegalArgumentException(\"The 'data' is null.\");\r\n        }\r\n        if (data.length != 2) {\r\n            throw new IllegalArgumentException(\"The 'data' array must have length == 2.\");\r\n        }\r\n        if (data[0].length != data[1].length) {\r\n            throw new IllegalArgumentException(\"The 'data' array must contain two arrays with equal length.\");\r\n        }\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex == -1) {\r\n            // add a new series\r\n            this.seriesKeys.add(seriesKey);\r\n            this.seriesList.add(data);\r\n        } else {\r\n            // replace an existing series\r\n            this.seriesList.remove(seriesIndex);\r\n            this.seriesList.add(seriesIndex, data);\r\n        }\r\n        notifyListeners(new DatasetChangeEvent(this, this));\r\n    }\r\n\r\n    /**\r\n     * Removes a series from the dataset, then sends a\r\n     * {@link DatasetChangeEvent} to all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     */\r\n    public void removeSeries(S seriesKey) {\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex >= 0) {\r\n            this.seriesKeys.remove(seriesIndex);\r\n            this.seriesList.remove(seriesIndex);\r\n            notifyListeners(new DatasetChangeEvent(this, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests this {@code DefaultXYDataset} instance for equality with an\r\n     * arbitrary object.  This method returns {@code true} if and only if:\r\n     * <ul>\r\n     * <li>{@code obj} is not {@code null};</li>\r\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\r\n     * <li>both datasets have the same number of series, each containing\r\n     *         exactly the same values.</li>\r\n     * </ul>\r\n     *\r\n     * @param obj  the object ({@code null} permitted).\r\n     *\r\n     * @return A boolean.\r\n     */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) {\r\n            return true;\r\n        }\r\n        if (!(obj instanceof DefaultXYDataset)) {\r\n            return false;\r\n        }\r\n        DefaultXYDataset that = (DefaultXYDataset) obj;\r\n        if (!this.seriesKeys.equals(that.seriesKeys)) {\r\n            return false;\r\n        }\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] d1 = this.seriesList.get(i);\r\n            double[][] d2 = (double[][]) that.seriesList.get(i);\r\n            double[] d1x = d1[0];\r\n            double[] d2x = d2[0];\r\n            if (!Arrays.equals(d1x, d2x)) {\r\n                return false;\r\n            }\r\n            double[] d1y = d1[1];\r\n            double[] d2y = d2[1];\r\n            if (!Arrays.equals(d1y, d2y)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        result = this.seriesKeys.hashCode();\r\n        result = 29 * result + this.seriesList.hashCode();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an independent copy of this dataset.\r\n     *\r\n     * @return The cloned dataset.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a problem cloning the\r\n     *     dataset (for instance, if a non-cloneable object is used for a\r\n     *     series key).\r\n     */\r\n    @Override\r\n    public Object clone() throws CloneNotSupportedException {\r\n        DefaultXYDataset clone = (DefaultXYDataset) super.clone();\r\n        clone.seriesKeys = new ArrayList(this.seriesKeys);\r\n        clone.seriesList = new ArrayList(this.seriesList.size());\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] data = this.seriesList.get(i);\r\n            double[] x = data[0];\r\n            double[] y = data[1];\r\n            double[] xx = new double[x.length];\r\n            double[] yy = new double[y.length];\r\n            System.arraycopy(x, 0, xx, 0, x.length);\r\n            System.arraycopy(y, 0, yy, 0, y.length);\r\n            clone.seriesList.add(i, new double[][] { xx, yy });\r\n        }\r\n        return clone;\r\n    }\r\n}\r\n","_id":"654c8e3dbeaabc9396c877d3"},"operation":{"name":"getDomainOrder","parameterTypes":[],"_id":"654c8e3dbeaabc9396c877d4"},"identifiers":{"parameters":[],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654c8e3dbeaabc9396c877d5"},"pre":[],"post":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"description\": \"init\",\n                \"property\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"description\": true,\n                    \"property\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654c9a4dbeaabc9396c87af0\",\n        \"description\": \"@return {@code DomainOrder.NONE}\",\n        \"property\": {\n            \"condition\": \"methodResultID == DomainOrder.NONE\",\n            \"description\": \"@return {@code DomainOrder.NONE}\",\n            \"_id\": \"654c9a4dbeaabc9396c87af1\"\n        },\n        \"guard\": {\n            \"condition\": \"true\",\n            \"description\": \"@return {@code DomainOrder.NONE}\",\n            \"_id\": \"654c9a4dbeaabc9396c87af2\"\n        },\n        \"__v\": 0\n    }\n}"],"throws":[],"__v":1},{"source":{"methodJavadoc":"    /**\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */","methodSourceCode":"public int getItemCount(int series){\r\n    if ((series < 0) || (series >= getSeriesCount())) {\r\n        throw new IllegalArgumentException(\"Series index out of bounds\");\r\n    }\r\n    double[][] seriesArray = this.seriesList.get(series);\r\n    return seriesArray[0].length;\r\n}","classSourceCode":"/* ===========================================================\r\n * JFreeChart : a free chart library for the Java(tm) platform\r\n * ===========================================================\r\n *\r\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\r\n *\r\n * Project Info:  http://www.jfree.org/jfreechart/index.html\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\r\n * USA.\r\n *\r\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \r\n * Other names may be trademarks of their respective owners.]\r\n *\r\n * ---------------------\r\n * DefaultXYDataset.java\r\n * ---------------------\r\n * (C) Copyright 2006-2022, by David Gilbert and Contributors.\r\n *\r\n * Original Author:  David Gilbert;\r\n * Contributor(s):   -;\r\n *\r\n */\r\npackage org.jfree.data.xy;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.jfree.chart.internal.Args;\r\nimport org.jfree.chart.api.PublicCloneable;\r\nimport org.jfree.data.DomainOrder;\r\nimport org.jfree.data.general.DatasetChangeEvent;\r\n\r\n/**\r\n * A default implementation of the {@link XYDataset} interface that stores\r\n * data values in arrays of double primitives.\r\n *\r\n * @param <S> the type of the series keys ({@code String} is commonly used).\r\n *\r\n * @since 1.0.2\r\n */\r\npublic class DefaultXYDataset<S extends Comparable<S>> extends AbstractXYDataset<S> implements XYDataset<S>, PublicCloneable {\r\n\r\n    /**\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     */\r\n    private List<S> seriesKeys;\r\n\r\n    /**\r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync\r\n     * with the seriesKeys list.\r\n     */\r\n    private List<double[][]> seriesList;\r\n\r\n    /**\r\n     * Creates a new {@code DefaultXYDataset} instance, initially\r\n     * containing no data.\r\n     */\r\n    public DefaultXYDataset() {\r\n        this.seriesKeys = new ArrayList<>();\r\n        this.seriesList = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Returns the number of series in the dataset.\r\n     *\r\n     * @return The series count.\r\n     */\r\n    @Override\r\n    public int getSeriesCount() {\r\n        return this.seriesList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns the key for a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The key for the series.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public S getSeriesKey(int series) {\r\n        Args.requireInRange(series, \"series\", 0, this.seriesKeys.size() - 1);\r\n        return this.seriesKeys.get(series);\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the series with the specified key, or -1 if there\r\n     * is no such series in the dataset.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} permitted).\r\n     *\r\n     * @return The index, or -1.\r\n     */\r\n    @Override\r\n    public int indexOf(S seriesKey) {\r\n        return this.seriesKeys.indexOf(seriesKey);\r\n    }\r\n\r\n    /**\r\n     * Returns the order of the domain (x-) values in the dataset.  In this\r\n     * implementation, we cannot guarantee that the x-values are ordered, so\r\n     * this method returns {@code DomainOrder.NONE}.\r\n     *\r\n     * @return {@code DomainOrder.NONE}.\r\n     */\r\n    @Override\r\n    public DomainOrder getDomainOrder() {\r\n        return DomainOrder.NONE;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public int getItemCount(int series) {\r\n        if ((series < 0) || (series >= getSeriesCount())) {\r\n            throw new IllegalArgumentException(\"Series index out of bounds\");\r\n        }\r\n        double[][] seriesArray = this.seriesList.get(series);\r\n        return seriesArray[0].length;\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public double getXValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[0][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getXValue(int, int)\r\n     */\r\n    @Override\r\n    public Number getX(int series, int item) {\r\n        return getXValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getY(int, int)\r\n     */\r\n    @Override\r\n    public double getYValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[1][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public Number getY(int series, int item) {\r\n        return getYValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Adds a series or if a series with the same key already exists replaces\r\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     * @param data  the data (must be an array with length 2, containing two\r\n     *     arrays of equal length, the first containing the x-values and the\r\n     *     second containing the y-values).\r\n     */\r\n    public void addSeries(S seriesKey, double[][] data) {\r\n        if (seriesKey == null) {\r\n            throw new IllegalArgumentException(\"The 'seriesKey' cannot be null.\");\r\n        }\r\n        if (data == null) {\r\n            throw new IllegalArgumentException(\"The 'data' is null.\");\r\n        }\r\n        if (data.length != 2) {\r\n            throw new IllegalArgumentException(\"The 'data' array must have length == 2.\");\r\n        }\r\n        if (data[0].length != data[1].length) {\r\n            throw new IllegalArgumentException(\"The 'data' array must contain two arrays with equal length.\");\r\n        }\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex == -1) {\r\n            // add a new series\r\n            this.seriesKeys.add(seriesKey);\r\n            this.seriesList.add(data);\r\n        } else {\r\n            // replace an existing series\r\n            this.seriesList.remove(seriesIndex);\r\n            this.seriesList.add(seriesIndex, data);\r\n        }\r\n        notifyListeners(new DatasetChangeEvent(this, this));\r\n    }\r\n\r\n    /**\r\n     * Removes a series from the dataset, then sends a\r\n     * {@link DatasetChangeEvent} to all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     */\r\n    public void removeSeries(S seriesKey) {\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex >= 0) {\r\n            this.seriesKeys.remove(seriesIndex);\r\n            this.seriesList.remove(seriesIndex);\r\n            notifyListeners(new DatasetChangeEvent(this, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests this {@code DefaultXYDataset} instance for equality with an\r\n     * arbitrary object.  This method returns {@code true} if and only if:\r\n     * <ul>\r\n     * <li>{@code obj} is not {@code null};</li>\r\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\r\n     * <li>both datasets have the same number of series, each containing\r\n     *         exactly the same values.</li>\r\n     * </ul>\r\n     *\r\n     * @param obj  the object ({@code null} permitted).\r\n     *\r\n     * @return A boolean.\r\n     */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) {\r\n            return true;\r\n        }\r\n        if (!(obj instanceof DefaultXYDataset)) {\r\n            return false;\r\n        }\r\n        DefaultXYDataset that = (DefaultXYDataset) obj;\r\n        if (!this.seriesKeys.equals(that.seriesKeys)) {\r\n            return false;\r\n        }\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] d1 = this.seriesList.get(i);\r\n            double[][] d2 = (double[][]) that.seriesList.get(i);\r\n            double[] d1x = d1[0];\r\n            double[] d2x = d2[0];\r\n            if (!Arrays.equals(d1x, d2x)) {\r\n                return false;\r\n            }\r\n            double[] d1y = d1[1];\r\n            double[] d2y = d2[1];\r\n            if (!Arrays.equals(d1y, d2y)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        result = this.seriesKeys.hashCode();\r\n        result = 29 * result + this.seriesList.hashCode();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an independent copy of this dataset.\r\n     *\r\n     * @return The cloned dataset.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a problem cloning the\r\n     *     dataset (for instance, if a non-cloneable object is used for a\r\n     *     series key).\r\n     */\r\n    @Override\r\n    public Object clone() throws CloneNotSupportedException {\r\n        DefaultXYDataset clone = (DefaultXYDataset) super.clone();\r\n        clone.seriesKeys = new ArrayList(this.seriesKeys);\r\n        clone.seriesList = new ArrayList(this.seriesList.size());\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] data = this.seriesList.get(i);\r\n            double[] x = data[0];\r\n            double[] y = data[1];\r\n            double[] xx = new double[x.length];\r\n            double[] yy = new double[y.length];\r\n            System.arraycopy(x, 0, xx, 0, x.length);\r\n            System.arraycopy(y, 0, yy, 0, y.length);\r\n            clone.seriesList.add(i, new double[][] { xx, yy });\r\n        }\r\n        return clone;\r\n    }\r\n}\r\n","_id":"654c8e3dbeaabc9396c877d8"},"operation":{"name":"getItemCount","parameterTypes":["int"],"_id":"654c8e3dbeaabc9396c877d9"},"identifiers":{"parameters":["series"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654c8e3dbeaabc9396c877da"},"pre":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654c9ac0beaabc9396c87afa\",\n        \"description\": \"@param series  the series index (in the range {@code 0} to {@code getSeriesCount() - 1}).\",\n        \"guard\": {\n            \"condition\": \"series >= 0 && series < this.getSeriesCount();\",\n            \"description\": \"@param series  the series index (in the range {@code 0} to {@code getSeriesCount() - 1}).\",\n            \"_id\": \"654c9ac0beaabc9396c87afb\"\n        },\n        \"__v\": 0\n    }\n}"],"post":[],"throws":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"exception\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"exception\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d0581beaabc9396c87dad\",\n        \"exception\": \"IllegalArgumentException\",\n        \"description\": \"@throws IllegalArgumentException if {@code series} is not in the specified range.\",\n        \"guard\": {\n            \"condition\": \"(series >= 0 && series < this.getSeriesCount())==false;\",\n            \"description\": \"@throws IllegalArgumentException if {@code series} is not in the specified range.\",\n            \"_id\": \"654d0581beaabc9396c87dae\"\n        },\n        \"__v\": 0\n    }\n}"],"__v":2},{"source":{"methodJavadoc":"    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */","methodSourceCode":"public double getXValue(int series, int item){\r\n    double[][] seriesData = this.seriesList.get(series);\r\n    return seriesData[0][item];\r\n}","classSourceCode":"/* ===========================================================\r\n * JFreeChart : a free chart library for the Java(tm) platform\r\n * ===========================================================\r\n *\r\n * (C) Copyright 2000-2022, by David Gilbert and Contributors.\r\n *\r\n * Project Info:  http://www.jfree.org/jfreechart/index.html\r\n *\r\n * This library is free software; you can redistribute it and/or modify it\r\n * under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation; either version 2.1 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\r\n * USA.\r\n *\r\n * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. \r\n * Other names may be trademarks of their respective owners.]\r\n *\r\n * ---------------------\r\n * DefaultXYDataset.java\r\n * ---------------------\r\n * (C) Copyright 2006-2022, by David Gilbert and Contributors.\r\n *\r\n * Original Author:  David Gilbert;\r\n * Contributor(s):   -;\r\n *\r\n */\r\npackage org.jfree.data.xy;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.jfree.chart.internal.Args;\r\nimport org.jfree.chart.api.PublicCloneable;\r\nimport org.jfree.data.DomainOrder;\r\nimport org.jfree.data.general.DatasetChangeEvent;\r\n\r\n/**\r\n * A default implementation of the {@link XYDataset} interface that stores\r\n * data values in arrays of double primitives.\r\n *\r\n * @param <S> the type of the series keys ({@code String} is commonly used).\r\n *\r\n * @since 1.0.2\r\n */\r\npublic class DefaultXYDataset<S extends Comparable<S>> extends AbstractXYDataset<S> implements XYDataset<S>, PublicCloneable {\r\n\r\n    /**\r\n     * Storage for the series keys.  This list must be kept in sync with the\r\n     * seriesList.\r\n     */\r\n    private List<S> seriesKeys;\r\n\r\n    /**\r\n     * Storage for the series in the dataset.  We use a list because the\r\n     * order of the series is significant.  This list must be kept in sync\r\n     * with the seriesKeys list.\r\n     */\r\n    private List<double[][]> seriesList;\r\n\r\n    /**\r\n     * Creates a new {@code DefaultXYDataset} instance, initially\r\n     * containing no data.\r\n     */\r\n    public DefaultXYDataset() {\r\n        this.seriesKeys = new ArrayList<>();\r\n        this.seriesList = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Returns the number of series in the dataset.\r\n     *\r\n     * @return The series count.\r\n     */\r\n    @Override\r\n    public int getSeriesCount() {\r\n        return this.seriesList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns the key for a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The key for the series.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public S getSeriesKey(int series) {\r\n        Args.requireInRange(series, \"series\", 0, this.seriesKeys.size() - 1);\r\n        return this.seriesKeys.get(series);\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the series with the specified key, or -1 if there\r\n     * is no such series in the dataset.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} permitted).\r\n     *\r\n     * @return The index, or -1.\r\n     */\r\n    @Override\r\n    public int indexOf(S seriesKey) {\r\n        return this.seriesKeys.indexOf(seriesKey);\r\n    }\r\n\r\n    /**\r\n     * Returns the order of the domain (x-) values in the dataset.  In this\r\n     * implementation, we cannot guarantee that the x-values are ordered, so\r\n     * this method returns {@code DomainOrder.NONE}.\r\n     *\r\n     * @return {@code DomainOrder.NONE}.\r\n     */\r\n    @Override\r\n    public DomainOrder getDomainOrder() {\r\n        return DomainOrder.NONE;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items in the specified series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     *\r\n     * @return The item count.\r\n     *\r\n     * @throws IllegalArgumentException if {@code series} is not in the\r\n     *     specified range.\r\n     */\r\n    @Override\r\n    public int getItemCount(int series) {\r\n        if ((series < 0) || (series >= getSeriesCount())) {\r\n            throw new IllegalArgumentException(\"Series index out of bounds\");\r\n        }\r\n        double[][] seriesArray = this.seriesList.get(series);\r\n        return seriesArray[0].length;\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public double getXValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[0][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the x-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The x-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getXValue(int, int)\r\n     */\r\n    @Override\r\n    public Number getX(int series, int item) {\r\n        return getXValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getY(int, int)\r\n     */\r\n    @Override\r\n    public double getYValue(int series, int item) {\r\n        double[][] seriesData = this.seriesList.get(series);\r\n        return seriesData[1][item];\r\n    }\r\n\r\n    /**\r\n     * Returns the y-value for an item within a series.\r\n     *\r\n     * @param series  the series index (in the range {@code 0} to\r\n     *     {@code getSeriesCount() - 1}).\r\n     * @param item  the item index (in the range {@code 0} to\r\n     *     {@code getItemCount(series)}).\r\n     *\r\n     * @return The y-value.\r\n     *\r\n     * @throws ArrayIndexOutOfBoundsException if {@code series} is not\r\n     *     within the specified range.\r\n     * @throws ArrayIndexOutOfBoundsException if {@code item} is not\r\n     *     within the specified range.\r\n     *\r\n     * @see #getX(int, int)\r\n     */\r\n    @Override\r\n    public Number getY(int series, int item) {\r\n        return getYValue(series, item);\r\n    }\r\n\r\n    /**\r\n     * Adds a series or if a series with the same key already exists replaces\r\n     * the data for that series, then sends a {@link DatasetChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     * @param data  the data (must be an array with length 2, containing two\r\n     *     arrays of equal length, the first containing the x-values and the\r\n     *     second containing the y-values).\r\n     */\r\n    public void addSeries(S seriesKey, double[][] data) {\r\n        if (seriesKey == null) {\r\n            throw new IllegalArgumentException(\"The 'seriesKey' cannot be null.\");\r\n        }\r\n        if (data == null) {\r\n            throw new IllegalArgumentException(\"The 'data' is null.\");\r\n        }\r\n        if (data.length != 2) {\r\n            throw new IllegalArgumentException(\"The 'data' array must have length == 2.\");\r\n        }\r\n        if (data[0].length != data[1].length) {\r\n            throw new IllegalArgumentException(\"The 'data' array must contain two arrays with equal length.\");\r\n        }\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex == -1) {\r\n            // add a new series\r\n            this.seriesKeys.add(seriesKey);\r\n            this.seriesList.add(data);\r\n        } else {\r\n            // replace an existing series\r\n            this.seriesList.remove(seriesIndex);\r\n            this.seriesList.add(seriesIndex, data);\r\n        }\r\n        notifyListeners(new DatasetChangeEvent(this, this));\r\n    }\r\n\r\n    /**\r\n     * Removes a series from the dataset, then sends a\r\n     * {@link DatasetChangeEvent} to all registered listeners.\r\n     *\r\n     * @param seriesKey  the series key ({@code null} not permitted).\r\n     */\r\n    public void removeSeries(S seriesKey) {\r\n        int seriesIndex = indexOf(seriesKey);\r\n        if (seriesIndex >= 0) {\r\n            this.seriesKeys.remove(seriesIndex);\r\n            this.seriesList.remove(seriesIndex);\r\n            notifyListeners(new DatasetChangeEvent(this, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests this {@code DefaultXYDataset} instance for equality with an\r\n     * arbitrary object.  This method returns {@code true} if and only if:\r\n     * <ul>\r\n     * <li>{@code obj} is not {@code null};</li>\r\n     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>\r\n     * <li>both datasets have the same number of series, each containing\r\n     *         exactly the same values.</li>\r\n     * </ul>\r\n     *\r\n     * @param obj  the object ({@code null} permitted).\r\n     *\r\n     * @return A boolean.\r\n     */\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj == this) {\r\n            return true;\r\n        }\r\n        if (!(obj instanceof DefaultXYDataset)) {\r\n            return false;\r\n        }\r\n        DefaultXYDataset that = (DefaultXYDataset) obj;\r\n        if (!this.seriesKeys.equals(that.seriesKeys)) {\r\n            return false;\r\n        }\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] d1 = this.seriesList.get(i);\r\n            double[][] d2 = (double[][]) that.seriesList.get(i);\r\n            double[] d1x = d1[0];\r\n            double[] d2x = d2[0];\r\n            if (!Arrays.equals(d1x, d2x)) {\r\n                return false;\r\n            }\r\n            double[] d1y = d1[1];\r\n            double[] d2y = d2[1];\r\n            if (!Arrays.equals(d1y, d2y)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a hash code for this instance.\r\n     *\r\n     * @return A hash code.\r\n     */\r\n    @Override\r\n    public int hashCode() {\r\n        int result;\r\n        result = this.seriesKeys.hashCode();\r\n        result = 29 * result + this.seriesList.hashCode();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an independent copy of this dataset.\r\n     *\r\n     * @return The cloned dataset.\r\n     *\r\n     * @throws CloneNotSupportedException if there is a problem cloning the\r\n     *     dataset (for instance, if a non-cloneable object is used for a\r\n     *     series key).\r\n     */\r\n    @Override\r\n    public Object clone() throws CloneNotSupportedException {\r\n        DefaultXYDataset clone = (DefaultXYDataset) super.clone();\r\n        clone.seriesKeys = new ArrayList(this.seriesKeys);\r\n        clone.seriesList = new ArrayList(this.seriesList.size());\r\n        for (int i = 0; i < this.seriesList.size(); i++) {\r\n            double[][] data = this.seriesList.get(i);\r\n            double[] x = data[0];\r\n            double[] y = data[1];\r\n            double[] xx = new double[x.length];\r\n            double[] yy = new double[y.length];\r\n            System.arraycopy(x, 0, xx, 0, x.length);\r\n            System.arraycopy(y, 0, yy, 0, y.length);\r\n            clone.seriesList.add(i, new double[][] { xx, yy });\r\n        }\r\n        return clone;\r\n    }\r\n}\r\n","_id":"654c8e3dbeaabc9396c877dd"},"operation":{"name":"getXValue","parameterTypes":["int","int"],"_id":"654c8e3dbeaabc9396c877de"},"identifiers":{"parameters":["series","item"],"receiverName":"receiverObjectID","returnName":"methodResultID","_id":"654c8e3dbeaabc9396c877df"},"pre":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d0670beaabc9396c87def\",\n        \"description\": \"@param series  the series index (in the range {@code 0} to {@code getSeriesCount() - 1}).\",\n        \"guard\": {\n            \"condition\": \"series >= 0 && series < this.getSeriesCount()\",\n            \"description\": \"@param series  the series index (in the range {@code 0} to {@code getSeriesCount() - 1}).\",\n            \"_id\": \"654d0670beaabc9396c87df0\"\n        },\n        \"__v\": 0\n    }\n}","{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d0683beaabc9396c87df4\",\n        \"description\": \"@param item  the item index (in the range {@code 0} to {@code getItemCount(series)}).\",\n        \"guard\": {\n            \"condition\": \"item >= 0 && item <= this.getItemCount(series);\",\n            \"description\": \"@param item  the item index (in the range {@code 0} to {@code getItemCount(series)}).\",\n            \"_id\": \"654d0683beaabc9396c87df5\"\n        },\n        \"__v\": 0\n    }\n}"],"post":[],"throws":["{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"exception\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"exception\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d06c9beaabc9396c87dfe\",\n        \"exception\": \"ArrayIndexOutOfBoundsException\",\n        \"description\": \"@throws ArrayIndexOutOfBoundsException if {@code item} is not within the specified range.\",\n        \"guard\": {\n            \"condition\": \"(item >= 0 && item <= this.getItemCount(series))==false\",\n            \"description\": \"@throws ArrayIndexOutOfBoundsException if {@code item} is not within the specified range.\",\n            \"_id\": \"654d06c9beaabc9396c87dff\"\n        },\n        \"__v\": 0\n    }\n}","{\n    \"$__\": {\n        \"activePaths\": {\n            \"paths\": {\n                \"_id\": \"init\",\n                \"exception\": \"init\",\n                \"description\": \"init\",\n                \"guard\": \"init\",\n                \"__v\": \"init\"\n            },\n            \"states\": {\n                \"init\": {\n                    \"_id\": true,\n                    \"exception\": true,\n                    \"description\": true,\n                    \"guard\": true,\n                    \"__v\": true\n                }\n            }\n        },\n        \"skipId\": true\n    },\n    \"$isNew\": false,\n    \"_doc\": {\n        \"_id\": \"654d06d7beaabc9396c87e03\",\n        \"exception\": \"ArrayIndexOutOfBoundsException\",\n        \"description\": \" @throws ArrayIndexOutOfBoundsException if {@code series} is not within the specified range.\",\n        \"guard\": {\n            \"condition\": \" (series >= 0 && series < this.getSeriesCount())==false\",\n            \"description\": \" @throws ArrayIndexOutOfBoundsException if {@code series} is not within the specified range.\",\n            \"_id\": \"654d06d7beaabc9396c87e04\"\n        },\n        \"__v\": 0\n    }\n}"],"__v":6}],"__v":10}